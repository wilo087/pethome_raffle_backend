type User {
    id: ID!
    name: String!
    code: Int!
    identificationCard: String!
}

type AuthPayload {
    token: String!
}

input inputLogin {
    username: String!
    password: String!
}

type Query {
  getUser(id: ID): [User!]! @isAuthenticated
  getAllWinner: [User!]! @isAuthenticated
}


type Mutation {
    createUser(data: createUserInput!): User! @isAuthenticated
    updateUser(id: ID! data: updateUserInput!): User! @isAuthenticated
    deleteUser(id: ID!): User! @isAuthenticated
    selectWinner: User! @isAuthenticated
    login(data: inputLogin!): AuthPayload!
}


input createUserInput {
    name: String!
    code: Int!
    identificationCard: String!
}


input updateUserInput {
    name: String
    code: Int
    identificationCard: String
}

directive @isAuthenticated on QUERY | FIELD | FIELD_DEFINITION